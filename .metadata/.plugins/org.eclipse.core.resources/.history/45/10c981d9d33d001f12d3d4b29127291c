package com.kh.practice.map;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;

public class MapPractice {
	/*
	 * *Map<K, V>특징
	 * 	:	key-value 형식으로 데이터를 저장(관리)
	 * 	+ key에 해당하는 데이터 : 중복 허용하지 않음(Set방식)
	 * 	+ value에 해당하는 데이터 : key값이 중복되지 않은 경우 출력 허용 (List 방식)
	 *  
	 * *Map의 메소드
	 * 	[1] 데이터 추가 : put(키에 해당하는 값, 밸류에 해당하는 값)			C
	 * 	[2] 데이터 삭제 : remove(키에 해당하는 값)							D
	 *  [3] 데이터 조회 : get(키에 해당하는 값)	
	 *  [4] 키 목록 조회: keySet()
	 *  [5] 데이터 길이 조회 : size()
	 */

	public static void main(String[] args) {
//		hashMapTest();
		propertiesTest();

	}
	public static void propertiesTest() {
		//Properties : Map 계열의 콜랙션 --> key + value 한쌍으로 데이터 저장(관리)
		
		Properties prop = new Properties();
		
		prop.put("List", "ArrayList");
		prop.put("set", "HashSet");
		prop.put("Map", "HashMap");
		prop.put("Map", "Properties");
		
		System.out.println(prop);
		//-> 저장 순서 x. key값은 중복되지 않음! (같은 기값인 경우 덮어씌워짐)
		
		/*
		 * properties : 주로 저장된 데이터를 파일에 출력 또는 입력하여 사용
		 * -Store(), load()메소드  사용
		 * 
		 */
		try {
			Properties prop2 = new Properties();
			
			prop.store(new FileOutputStream("test.properties"), "propertiesTese");
			
			prop.storeToXML(new FileOutputStream("test.xml"), "xmlTest");
			
			//load()
			prop2.load(new FileInputStream("test.properties"));
			System.out.println(prop2);
			
			prop2.loadFromXML(new FileInputStream("test.xml"));
			System.out.println(prop2);
			
			
		} catch (IOException e) {
			System.out.println("[ERROR]" + e.getMessage());
		}
	}
	public static void hashMapTest() {
		//HashMap 객체 선언 및 생성
		//Key - 정수형 데이터, Value - 문자열 데이터
		Map<Integer, String> hasMap = new HashMap();
		
		//Map 구조에 데이터를 저장(추가) : put(key, value);
		hasMap.put(1000, "프리티인창");
		hasMap.put(1001, "종군당");
		hasMap.put(1002, "피하기다운로드");
		
		//키 목록 조회 : keySet()
		Set<Integer> keyList = hasMap.keySet();
		
		//키 데이터 출력
		for(Integer key : keyList) {
			System.out.println(key);
		}
		System.out.println("-----------------------------");
		
		//데이터 조회
		for(Integer key : keyList) {
			System.out.println(key + " : " + hasMap.get(key));
			
			//"피하기다운로드" 데이터 제거
			hasMap.remove(1002);
			
			//Inerator 객체를 사용하며 조회
			Iterator<Integer> it = keyList.iterator();
			while(it.hasNext()) {
				System.out.println(it.next() + ":" + hasMap.get(key));
			}
			System.out.println("-----------------------------");
			//---------------------------------
			//entrySet() : key+value 새트의 집합
			Set entrySet = hasMap.entrySet();
			
			Iterator entryIt = entrySet.iterator();
			while(entryIt.hasNext()){
				Entry entry = (Entry)entryIt.next();
				
				Integer k = (Integer)entry.getKey();
				String value = (String)entry.getValue();
				
				System.out.println(k + " : " + value);
						
			}
			
			
			
		}
		
	}

}
